buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id 'org.springframework.boot' version '2.6.14'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'

    id 'com.github.spotbugs' version '4.7.1'
    id 'org.asciidoctor.jvm.convert' version '3.1.0'
    id 'jacoco'
    id 'checkstyle'
    id 'idea'
    id 'eclipse'

    id 'com.palantir.docker' version '0.30.0'
    id 'com.palantir.docker-run' version '0.30.0'
    id 'com.palantir.docker-compose' version '0.30.0'
}

group 'name.troshin.anton.clematis'
version = '0.0.4'

apply from: file("${project.rootDir}/dependencies.gradle")

sourceCompatibility = '11'
targetCompatibility = '11'

configurations {
    implementation.exclude group: "org.slf4j", module: "slf4j-log4j12"
}

repositories {
    mavenCentral()
}
// ------------ JaCoCo test coverage + ascii doctor as a post processor

ext {
    setProperty('snippetsDir', file("build/generated-snippets"))
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    allprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        csv.enabled false
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects.test
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}
// ------------ Spotbugs configuration  ---------
spotbugsMain {
    reports {
        xml {
            enabled = false
        }
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        }
    }
}

spotbugsTest {
    reports {
        xml {
            enabled = false
        }
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
        }
    }
}
// ------------ Checkstyle configuration  ---------
checkstyle {
    configProperties.configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionFile = file("${project.rootDir}/config/checkstyle/suppressions.xml")
}

task checkstyleReport {
    doLast {
        if (file("${buildDir}/reports/checkstyle/${project.ext.checkType}.xml").exists()) {
            ant.xslt(in: "${buildDir}/reports/checkstyle/${project.ext.checkType}.xml",
                    style: "${project.rootDir}/config/checkstyle/checkstyle.xsl",
                    out: "${buildDir}/reports/checkstyle/checkstyle_${project.ext.checkType}.html")
        }
    }
}

tasks.withType(Checkstyle) {
    exclude '**/*Test*'
}

build {
    dependsOn tasks.codeCoverageReport
}

docker {
    name = "atroshin/${project.name}:${version}"
    dockerfile = file('Dockerfile')
    copySpec.from("${buildDir}").into("build")
    pull true
    noCache true
}

dockerCompose {
    dockerComposeFile file("${project.rootDir}/docker/docker-compose.yml")
}

dockerRun {
    name 'clematis.auth.api'
    image "atroshin/${project.name}:${version}"
    ports '18083:8080'
}

springBoot {
    buildInfo {
        properties {
            artifact = 'clematis-auth-api'
            version = version
            group = 'org.clematis.keycloak'
            name = 'Clematis Authentication API'
        }
    }
}

